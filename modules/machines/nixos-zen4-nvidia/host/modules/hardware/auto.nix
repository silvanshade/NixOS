# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [
    "ahci"
    "nvme"
    "sd_mod"
    "thunderbolt"
    "usb_storage"
    "usbhid"
    "xhci_pci"
    "nvidia_drm"
    "nvidia_modeset"
    "nvidia_uvm"
    "nvidia"
  ];
  boot.initrd.kernelModules = [
    "i2c-dev"
  ];
  boot.kernelModules = [
    "kvm-amd"
  ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    {
      device = "/dev/disk/by-uuid/b70b486a-24d4-49c9-9b1d-1195d0a0ef37";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    {
      device = "/dev/disk/by-uuid/37A3-1DE4";
      fsType = "vfat";
      options = [
        "umask=0077"
        "defaults"
      ];
    };

  swapDevices =
    [{ device = "/dev/disk/by-uuid/1334a51f-704f-4fe7-9345-61bb1449a1fe"; }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux" // {
    # gcc.arch = "znver4";
    # gcc.tune = "znver4";
    # aesSupport = true;
    # avx2Support = true;
    # avx512Support = true;
    # avxSupport = true;
    # sse3Support = true;
    # sse4_1Support = true;
    # sse4_2Support = true;
    # sse4_aSupport = true;
    # ssse3Support = true;
  };
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
